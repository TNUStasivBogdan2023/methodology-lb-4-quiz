{"version":3,"file":"component---src-pages-index-tsx-ca2705ca22f7dd31e5ed.js","mappings":"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","sources":["webpack://my-gatsby-site/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://my-gatsby-site/./node_modules/clsx/dist/clsx.mjs","webpack://my-gatsby-site/./src/data/questions.ts","webpack://my-gatsby-site/./src/pages/index.tsx"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    _registerProps.current = control.register(name, props.rules);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || isBoolean(formState.disabled)\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n        disabled: false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if (isBoolean(disabled)) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref) => {\n                ref.disabled = disabled;\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        disabled: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","export type Question = {\n  title: string,\n  answers: Array<{ label: string, value: number }>\n}\n\nexport const questions: Question[] = [\n  {\n    title: \"1.\",\n    answers: [\n      {\n        label: \"Мені не сумно\",\n        value: 0\n      },\n\n      {\n        label: \"Значну частину часу мені сумно\",\n        value: 1\n      },\n\n      {\n        label: \"Я увесь час чуюсь сумним, пригніченим\",\n        value: 2\n      },\n\n      {\n        label: \"Я відчуваю нестерпний сум та тугу \",\n        value: 3\n      },\n    ]\n  },\n\n  {\n    title: \"2. \",\n    answers: [\n      {\n        label: \"Я не вважаю, що заслуговую покарання\",\n        value: 0\n      },\n\n      {\n        label: \"Я допускаю, що заслуговую покарання\",\n        value: 1\n      },\n\n      {\n        label: \"Я вважаю, що маю бути покараний\",\n        value: 2\n      },\n\n      {\n        label: \"Я відчуваю, що доля карає мене\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"3. \",\n    answers: [\n      {\n        label: \"Я спокійно думаю про майбутнє\",\n        value: 0\n      },\n\n      {\n        label: \"Думки про майбутнє викликають в мене занепокоєння більше, ніж раніше\",\n        value: 1\n      },\n\n      {\n        label: \"Мені нема чого чекати від майбутнього і на що надіятися\",\n        value: 2\n      },\n\n      {\n        label: \"Я відчуваю, що в моєму майбутньому нема нічого доброго і я нічого не можу змінити\",\n        value: 3\n      },\n    ]\n  },\n\n  {\n    title: \"4. \",\n    answers: [\n      {\n        label: \"Я не відчуваю себе невдахою\",\n        value: 0\n      },\n\n      {\n        label: \"В минулому я мав би менше зазнавати невдач\",\n        value: 1\n      },\n\n      {\n        label: \"Моє життя – це суцільна низка невдач та помилок\",\n        value: 2\n      },\n\n      {\n        label: \"Я абсолютний невдаха в усьому (навчанні, праці, сімейному житті і т.д.)\",\n        value: 3\n      },\n    ]\n  },\n\n  {\n    title: \"5. \",\n    answers: [\n      {\n        label: \"Я в основному задоволений тим, ким я є\",\n        value: 0\n      },\n\n      {\n        label: \"Я втратив впевненість у собі\",\n        value: 1\n      },\n\n      {\n        label: \"Я розчарований в собі\",\n        value: 2\n      },\n\n      {\n        label: \"Я не люблю себе\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"6. \",\n    answers: [\n      {\n        label: \"Я отримую задоволення від улюблених занять і речей\",\n        value: 0\n      },\n\n      {\n        label: \"Я не отримую такого задоволення, як раніше від улюблених занять та речей\",\n        value: 1\n      },\n\n      {\n        label: \"Я отримую дуже мало задоволення від того, що зазвичай мене тішило\",\n        value: 2\n      },\n\n      {\n        label: \"Я не можу отримати задоволення від того, що зазвичай мене тішило\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"7. \",\n    answers: [\n      {\n        label: \"Я критикую і звинувачую себе не більше, ніж зазвичай\",\n        value: 0\n      },\n\n      {\n        label: \"Я більш критичний до себе, ніж зазвичай\",\n        value: 1\n      },\n\n      {\n        label: \"Я критикую себе за всі свої помилки\",\n        value: 2\n      },\n\n      {\n        label: \"Я звинувачую себе у всьому поганому, що відбувається\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"8. \",\n    answers: [\n      {\n        label: \"Я не відчуваю відчуття провини\",\n        value: 0\n      },\n\n      {\n        label: \"Я відчуваю почуття провини за багато речей, зроблених мною\",\n        value: 1\n      },\n\n      {\n        label: \"Я дуже часто чуюсь поганою людиною і мене мучить відчуття провини\",\n        value: 2\n      },\n\n      {\n        label: \"Мене мучить постійне відчуття провини\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"9. \",\n    answers: [\n      {\n        label: \"У мене не виникає думок про самогубство\",\n        value: 0\n      },\n\n      {\n        label: \"У мене бувають думки про самогубство, але я знаю, що не зроблю цього\",\n        value: 1\n      },\n\n      {\n        label: \"Я хочу вмерти і планую самогубство\",\n        value: 2\n      },\n\n      {\n        label: \"Якщо б була нагода, я б зробив самогубство\",\n        value: 3\n      },\n    ]\n  },\n\n  {\n    title: \"10. \",\n    answers: [\n      {\n        label: \"Я не більш неспокійний або збуджений, ніж зазвичай\",\n        value: 0\n      },\n\n      {\n        label: \"Я відчуваю більше занепокоєння і збудження, ніж зазвичай\",\n        value: 1\n      },\n\n      {\n        label: \"Я відчуваю таке занепокоєння і збудження, що мені важко сидіти спокійно\",\n        value: 2\n      },\n\n      {\n        label: \"Я відчуваю таке занепокоєння і збудження, що змушений весь час рухатися або щось робити\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"11. \",\n    answers: [\n      {\n        label: \"Я не плачу більш часто, ніж звичайно\",\n        value: 0\n      },\n\n      {\n        label: \"Я плачу частіше, ніж звичайно\",\n        value: 1\n      },\n\n      {\n        label: \"Я плáчу кожен день по кожному незначному приводу\",\n        value: 2\n      },\n\n      {\n        label: \"Я хочу плакати, але не можу\",\n        value: 3\n      },\n    ]\n  },\n\n  {\n    title: \"12. \",\n    answers: [\n      {\n        label: \"Я не втратив цікавості до інших людей і занять\",\n        value: 0\n      },\n\n      {\n        label: \"Люди і речі цікавлять мене менше, ніж раніше.\",\n        value: 1\n      },\n\n      {\n        label: \"Я значною мірою втратив цікавість до інших людей і занять\",\n        value: 2\n      },\n\n      {\n        label: \"Мене важко чимось зацікавити\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"13. \",\n    answers: [\n      {\n        label: \"Я не дратуюсь частіше, ніж звичайно\",\n        value: 0\n      },\n\n      {\n        label: \"Я дратуюся легше, ніж звичайно\",\n        value: 1\n      },\n\n      {\n        label: \"Я дратуюся значно легше, ніж звичайно\",\n        value: 2\n      },\n\n      {\n        label: \"Я постійно відчуваю роздратування\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"14. \",\n    answers: [\n      {\n        label: \"Мені не є важче, ніж звичайно приймати рішення\",\n        value: 0\n      },\n\n      {\n        label: \"Тепер частіше, ніж раніше я зволікаю з прийняттям рішень\",\n        value: 1\n      },\n\n      {\n        label: \"Мені дуже важко прийняти будь-яке рішення\",\n        value: 2\n      },\n\n      {\n        label: \"Я не в стані приймати жодних рішень\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"15. \",\n    answers: [\n      {\n        label: \"Мій апетит не змінився\",\n        value: 0\n      },\n\n      {\n        label: \"Мій апетит дещо знижений у порівнянні зі звичайним\",\n        value: 1\n      },\n\n      {\n        label: \"Мій апетит дещо підвищений в порівнянні зі звичайним\",\n        value: 2\n      },\n\n      {\n        label: \"У мене зовсім нема апетиту\",\n        value: 0\n      },\n    ]\n  },\n\n\n  {\n    title: \"16. \",\n    answers: [\n      {\n        label: \"Я не відчуваю себе нікчемним\",\n        value: 0\n      },\n\n      {\n        label: \"Я не відчуваю себе таким же цінним і корисним, як завжди\",\n        value: 1\n      },\n\n      {\n        label: \"Я відчуваю себе менш цінним, ніж інші\",\n        value: 2\n      },\n\n      {\n        label: \"Я відчуваю себе повністю нікчемним\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"17. \",\n    answers: [\n      {\n        label: \"Я так само добре можу зосередитися, як завжди\",\n        value: 0\n      },\n\n      {\n        label: \"Я не можу так само добре зосередитися, як завжди\",\n        value: 1\n      },\n\n      {\n        label: \"Мені важко довго утримувати увагу на чому-небудь\",\n        value: 2\n      },\n\n      {\n        label: \"Я не можу зосередитися ні на чому\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"18. \",\n    answers: [\n      {\n        label: \"Я так само енергійний, як зазвичай\",\n        value: 0\n      },\n\n      {\n        label: \"У мене менше енергії, ніж зазвичай\",\n        value: 1\n      },\n\n      {\n        label: \"У мене недостатньо енергії, щоб зробити багато чого з того, що потрібно\",\n        value: 2\n      },\n\n      {\n        label: \"У мене немає сил ні на що\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"19. \",\n    answers: [\n      {\n        label: \"Я втомлююся не більш, ніж зазвичай\",\n        value: 0\n      },\n\n      {\n        label: \"Я втомлююся значно легше, ніж раніше\",\n        value: 1\n      },\n\n      {\n        label: \"Через втому я не можу виконувати багато звичних для мене справа\",\n        value: 2\n      },\n\n      {\n        label: \"Через втому я не можу виконувати більшість звичних для мене справа\",\n        value: 3\n      },\n    ]\n  },\n\n\n  {\n    title: \"20. \",\n    answers: [\n      {\n        label: \"Я сплю так само, як завжди\",\n        value: 0\n      },\n\n      {\n        label: \"Я сплю дещо більше, ніж зазвичай\",\n        value: 1\n      },\n\n      {\n        label: \"Я сплю значно менше, ніж зазвичай\",\n        value: 3\n      },\n\n      {\n        label: \"Я буджуся на 1-2 години раніше, ніж звичайно і мені важко знову заснути\",\n        value: 3\n      },\n    ]\n  },\n\n  {\n    title: \"21. \",\n    answers: [\n      {\n        label: \"Мій інтерес до статевого життя за останній час не зменшився\",\n        value: 0\n      },\n\n      {\n        label: \"Статеве життя мене цікавить зараз менше, ніж звичайно\",\n        value: 1\n      },\n\n      {\n        label: \"Мій інтерес до статевого життя значно зменшився\",\n        value: 2\n      },\n\n      {\n        label: \"Я повністю втратив інтерес до статевого життя\",\n        value: 3\n      },\n    ]\n  }\n];\n\n\n\n","import * as React from \"react\"\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form\"\nimport { clsx } from \"clsx\";\nimport { questions } from \"@/data/questions\";\n\ntype FormData = {\n  answers: string[]\n}\n\nexport default function Index() {\n  const { handleSubmit, register, formState } = useForm<FormData>()\n  const [result, setResult] = useState<number | null>(null);\n\n  const onSubmit = useCallback((data: FormData) => {\n    const result = data.answers\n      .map(parseInt)\n      .reduce((b, a) => a + b);\n\n    setResult(result);\n  }, []);\n\n  return (\n    <div className=\"w-[1024px] mx-auto pt-8\">\n      {result !== null && (\n        <>\n          <h1 className=\"text-3xl font-bold\">Результат</h1>\n\n          <div className=\"my-4 space-y-3\">\n            {result === 0 && (\n              <p>У вас немає депресії</p>\n            )}\n\n            {result >= 1 && result <= 13 && (\n              <p>У вас легка форма дипресії. Рекомендовано отримати огляд кваліфікованого фахівця</p>\n            )}\n\n            {result >= 14 && result <= 28 && (\n              <p>У вас поміркована депресія. Рекомендовано отримати консультацію кваліфікованого фахівця</p>\n            )}\n\n            {result >= 29 && result <= 63 && (\n              <p>У вас важка форма дипресії. Рекомендовано негайно отримати консультацію кваліфікованого фахівця.</p>\n            )}\n\n            <button\n              onClick={() => setResult(null)}\n              className=\"btn btn-primary btn-sm\"\n            > Пройти тест знову </button>\n          </div>\n        </>\n      )}\n\n      {result === null && (\n        <>\n          <h1 className=\"text-3xl font-bold\">Інструкція</h1>\n          <div className=\"my-4 space-y-3\">\n            <p>Цей опитувальник складається з 21 пункту, кожен з яких містить кілька варіантів тверджень. Будь ласка, уважно прочитайте всі варіанти відповідей до кожного пункту і виберіть один з них, який найкраще описує Ваше самопочуття протягом останніх двох тижнів, включаючи сьогоднішній день. Натисніть (клікніть) на вибраному твердженні. Переконайтеся, що Ви не пропустили жодного пункту.</p>\n            <p>Після заповнення опитувальника натисніть на кнопку <strong>Обробити</strong></p>\n          </div>\n          <form className=\"pb-4\" onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"space-y-12 mb-4\">\n              {questions.map((question, index) => (\n                <div className={clsx(\n                  formState.errors.answers?.[index]?.type === \"required\" && \"text-red-600\")\n                }>\n                  <h2 className=\"text-lg font-bold mb-2\">{question.title}</h2>\n                  <fieldset>\n                    <ul className=\"space-y-2\">\n                      {question.answers.map(answer => (\n                        <li\n                          className={clsx(\"flex items-center space-x-3\")}\n                        >\n                          <input\n                            type=\"radio\"\n                            className=\"radio-sm\"\n                            value={answer.value}\n                            {...register(`answers.${index}`, { required: true })}\n                          />\n                          <label>{answer.label}</label>\n                        </li>\n                      ))}\n                    </ul>\n                  </fieldset>\n                </div>\n              ))}\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary btn-sm\">Обробити</button>\n          </form>\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","isBoolean","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","appendErrors","validateAllFieldCriteria","errors","message","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_f","currentField","refs","ref","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_state","unMount","array","timer","_subjects","state","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","_updateDisabledField","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","_updateFormState","_disableForm","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","r","t","f","n","clsx","arguments","questions","title","answers","label","Index","_formControl","_values","useForm","setResult","useState","useCallback","parseInt","b","a","React","className","onClick","question","_formState$errors$ans","_formState$errors$ans2","answer"],"sourceRoot":""}